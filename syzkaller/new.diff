diff --git a/pkg/build/build.go b/pkg/build/build.go
index 3e9e7391..b7fdb166 100644
--- a/pkg/build/build.go
+++ b/pkg/build/build.go
@@ -73,6 +73,8 @@ func getBuilder(targetOS, targetArch, vmType string) (builder, error) {
 		return akaros{}, nil
 	case targetOS == "openbsd" && targetArch == "amd64" && (vmType == "gce" || vmType == "vmm"):
 		return openbsd{}, nil
+	case targetOS == "netbsd" && targetArch == "amd64" && vmType == "qemu":
+		return netbsd{}, nil
 	default:
 		return nil, fmt.Errorf("unsupported image type %v/%v/%v", targetOS, targetArch, vmType)
 	}
diff --git a/pkg/build/netbsd.go b/pkg/build/netbsd.go
new file mode 100644
index 00000000..8906a4eb
--- /dev/null
+++ b/pkg/build/netbsd.go
@@ -0,0 +1,59 @@
+// Copyright 2018 syzkaller project authors. All rights reserved.
+// Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.
+
+package build
+
+import (
+	"fmt"
+	"path/filepath"
+	"runtime"
+	"strconv"
+	"time"
+
+	"github.com/google/syzkaller/pkg/osutil"
+)
+
+type netbsd struct{}
+
+func (ctx netbsd) build(targetArch, vmType, kernelDir, outputDir, compiler, userspaceDir,
+	cmdlineFile, sysctlFile string, config []byte) error {
+	const kernelName = "GENERIC_SYZKALLER"
+	confDir := fmt.Sprintf("%v/sys/arch/%v/conf", kernelDir, targetArch)
+	compileDir := fmt.Sprintf("%v/sys/arch/%v/compile/%v", kernelDir, targetArch, kernelName)
+
+	if err := osutil.WriteFile(filepath.Join(confDir, kernelName), config); err != nil {
+		return err
+	}
+
+	// Build tools before building kernel
+	if _, err := osutil.RunCmd(100*time.Minute, kernelDir, "./build.sh", "-m", targetArch, "-U", "-j"+strconv.Itoa(runtime.NumCPU())	, "tools"); err != nil {
+			return err
+	}
+
+	// Build kernel
+	if _, err := osutil.RunCmd(100*time.Minute, kernelDir, "./build.sh", "-m", targetArch, "-U", "-j"+strconv.Itoa(runtime.NumCPU()), "kernel="+kernelName); err != nil {
+			return err
+	}
+
+	for _, s := range []struct{ dir, src, dst string }{
+		{compileDir, "netbsd", "kernel"},
+		{compileDir, "netbsd.gdb", "netbsd.gdb"},
+		{userspaceDir, "image", "image"},
+		{userspaceDir, "key", "key"},
+	} {
+		fullSrc := filepath.Join(s.dir, s.src)
+		fullDst := filepath.Join(outputDir, s.dst)
+		if err := osutil.CopyFile(fullSrc, fullDst); err != nil {
+			return fmt.Errorf("failed to copy %v -> %v: %v", fullSrc, fullDst, err)
+		}
+	}
+	return nil
+}
+
+func (ctx netbsd) clean(kernelDir string) error {
+	// Building clean is fast enough and incremental builds in face of
+	// changing config files don't work. Instead of optimizing for the
+	// case where humans have to think, let's bludgeon it with a
+	// machine.
+	return nil
+}
diff --git a/pkg/vcs/netbsd.go b/pkg/vcs/netbsd.go
new file mode 100644
index 00000000..dc3a7d0a
--- /dev/null
+++ b/pkg/vcs/netbsd.go
@@ -0,0 +1,55 @@
+// Copyright 2018 syzkaller project authors. All rights reserved.
+// Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.
+
+package vcs
+
+import (
+	"fmt"
+	"io"
+)
+
+type netbsd struct {
+	git *git
+}
+
+func newnetbsd(vm, dir string) *netbsd {
+	return &netbsd{
+		git: newGit(dir),
+	}
+}
+
+func (ctx *netbsd) Poll(repo, branch string) (*Commit, error) {
+	return ctx.git.Poll(repo, branch)
+}
+
+func (ctx *netbsd) CheckoutBranch(repo, branch string) (*Commit, error) {
+	return nil, fmt.Errorf("not implemented for netbsd")
+}
+
+func (ctx *netbsd) CheckoutCommit(repo, commit string) (*Commit, error) {
+	return nil, fmt.Errorf("not implemented for netbsd")
+}
+
+func (ctx *netbsd) SwitchCommit(commit string) (*Commit, error) {
+	return nil, fmt.Errorf("not implemented for netbsd")
+}
+
+func (ctx *netbsd) HeadCommit() (*Commit, error) {
+	return nil, fmt.Errorf("not implemented for netbsd")
+}
+
+func (ctx *netbsd) ListRecentCommits(baseCommit string) ([]string, error) {
+	return ctx.git.ListRecentCommits(baseCommit)
+}
+
+func (ctx *netbsd) ExtractFixTagsFromCommits(baseCommit, email string) ([]FixCommit, error) {
+	return ctx.git.ExtractFixTagsFromCommits(baseCommit, email)
+}
+
+func (ctx *netbsd) Bisect(bad, good string, trace io.Writer, pred func() (BisectResult, error)) (*Commit, error) {
+	return nil, fmt.Errorf("not implemented for netbsd")
+}
+
+func (ctx *netbsd) PreviousReleaseTags(commit string) ([]string, error) {
+	return nil, fmt.Errorf("not implemented for netbsd")
+}
